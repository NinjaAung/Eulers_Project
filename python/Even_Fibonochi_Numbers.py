import time
start_time = time.time()
'''
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

                                               0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


Notes:

a + b = c      1 + 2 =Â 3
b + c + d      3 + 2 = 5


Golden rato way:

phi = 1.618034

(phi^n - (1 - phi)^n)/sqrt(5)



Recustion:
0 + 1 = 1
1 + 2 = 3
2 + 3 = 5
5 + 3 = 8

fib(0): returns 0
fib(1): returns 1
fib(2): fib(2-2) + fib(2-1) = 1
fib(3): fib(3-2) + fib(3-1) = 2
fib(4): fib(4-2) + fib(4-1) = 3
fib(5): fib(5-2) + fib(5-1) = 5





'''
four_mil = 4*(10**6)


def fib(n):
    if n == 0:
        return 0 
    elif n == 1:
        return 1
    else: 
        return fib(n-2) + fib(n-1)


fib(5)

def fib_loop(loop):
    a = x = c = n = 0
    b = 1
    while c < loop:
        c = a + b
        a = b
        b = c
        n += 1
        if c%2==0:
            x += c
    return(x, n)


# Starting at 0 and 1
x = 1
y = 1
z = 0
# sum of all odd-valued terms
total = 0
while z < 4000000:
    z = (x+y)
    if z % 2 == 0:
        total += z
    # next iteration
    x = y
    y = z
print(total)
print(fib_loop(four_mil))

print(f"--- {time.time() - start_time} seconds ---")